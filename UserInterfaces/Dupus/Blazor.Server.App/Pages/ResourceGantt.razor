@page "/resourcegantt"

<PageTitle>Resource Gantt</PageTitle>

<div class="row">
    <SfGantt ShowOverallocation="true" DataSource="@TaskCollection" Height="750px" AllowRowDragAndDrop="true" ScrollToTaskbarOnClick
             Toolbar="@(new List<Object>() { "Edit", "CollapseAll", "ExpandAll" })" ViewType="ViewType.ResourceView" TreeColumnIndex="1">
        <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" DurationUnit="DurationUnit" Progress="Progress"
                         ParentID="ParentId" Work="Work" ResourceInfo="Resources" Dependency="Predecessor">
        </GanttTaskFields>
        <GanttSplitterSettings ColumnIndex="5"></GanttSplitterSettings>
        <GanttColumns>
            <GanttColumn Field="TaskId" HeaderText="Task ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Visible="false"></GanttColumn>
            <GanttColumn Field="ResourceId" Visible=false></GanttColumn>
            <GanttColumn Field="ResourceName" HeaderText="Name" Width="250"></GanttColumn>
            <GanttColumn Field="TaskName" HeaderText="Task Name" Width="350"></GanttColumn>
            <GanttColumn Field="StartDate" HeaderText="Start Date" Format="dd.MM.yyy" Width="125"></GanttColumn>
            <GanttColumn Field="Duration" HeaderText="Duration" Width="125" Format="N2"></GanttColumn>
            <GanttColumn Field="Progress" HeaderText="Progress" Width="125" Format="F2"></GanttColumn>
        </GanttColumns>
        <GanttResourceFields Group="ResourceGroup" Resources="@ResourceCollection" Id="ResourceId" Name="ResourceName" Unit="Unit"
                             TResources="ResourceData"></GanttResourceFields>
        <GanttLabelSettings RightLabel="TaskName" TValue="ResourceTaskData"></GanttLabelSettings>
        <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true"></GanttEditSettings>
    </SfGantt>
</div>



@code {
    private List<ResourceTaskData> TaskCollection = new List<ResourceTaskData>();
    private List<ResourceData> ResourceCollection { get; set; }
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
        this.ResourceCollection = GanttResources();
    }

    public List<ResourceData> GanttResources()
    {
        List<ResourceData> GanttResourcesCollection = new List<ResourceData>();

         var resources = ApiService.GetAsync<IEnumerable<GanttResourceGroupDto>>($"api/{ControllerNameManager.Instance.GetControllerName(nameof(LocationController))}/GantResource/21");
        if (resources is not null)
        {
            foreach (var resource in resources)
            {
                GanttResourcesCollection.Add(new ResourceData
                    {
                        ResourceId = resource.KonumID,
                        ResourceName = resource.Ad!,
                        ResourceGroup = resource.KonumKodu
                    });
            }
        }
        return GanttResourcesCollection;
    }

    public class ResourceTaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string? Duration { get; set; }
        public string DurationUnit { get; set; } = "minutes";
        public decimal? Progress { get; set; }
        public int? ParentId { get; set; }
        public string Predecessor { get; set; }
        public string Notes { get; set; }
        public double? Work { get; set; }
        public string TaskType { get; set; }
        public List<ResourceData> Resources { get; set; }
    }

    public List<ResourceTaskData> GetTaskCollection()
    {
        TaskCollection.Clear();

        var workOrders = ApiService.GetAsync<IEnumerable<TaskData>>($"api/{ControllerNameManager.Instance.GetControllerName(nameof(WorkOrdersController))}/GanttTasks");
        if (workOrders is not null)
        {
            foreach (var wo in workOrders.Take(800))
            {
                TaskCollection.Add(new ResourceTaskData()
                    {
                        TaskId = wo.TaskId,
                        TaskName = wo.TaskName,
                        StartDate = wo.StartDate,
                        EndDate = wo.EndDate,
                        Duration = wo.Duration.ToString(),
                        Progress = wo.Progress,
                        Resources = new List<ResourceData>() { new ResourceData() { ResourceId = wo.Resources.First().ResourceId } }
                    });
            }
        }
        return TaskCollection;
    }
}