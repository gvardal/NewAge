@page "/details"
@page "/details/{Id:guid}"
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using Microsoft.AspNetCore.Http.Extensions;
@inject NavigationManager navigationManager
@inject SfDialogService DialogService

<div class="row">
    <div class="col me-2">
        <div class="row mb-2">
            <SfCard>
                <CardHeader Title="Details" />
                <CardContent>
                    <EditForm Model="@appointment">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="ps-2">Subject</label>
                                <SfTextBox Placeholder='Subject' Readonly @bind-Value="appointment.Subject"></SfTextBox>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="ps-2">Start Date/Time</label>
                                <SfDateTimePicker @bind-Value="appointment.StartTime" Readonly="false"></SfDateTimePicker>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="ps-2">End Date/Time</label>
                                <SfDateTimePicker @bind-Value="appointment.EndTime" Readonly="false"></SfDateTimePicker>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label class="ps-2">Short Description</label>
                                <SfTextBox @bind-Value="appointment.ShortDescription" Multiline CssClass="description" style="height:100px"></SfTextBox>
                            </div>
                        </div>
                    </EditForm>
                </CardContent>
            </SfCard>
        </div>
        <div class="row">
            <SfCard>
                <CardHeader Title="Topics" />
                <CardContent>
                    <div class="p-2 row">
                        <SfMessage ShowIcon="false" ContentAlignment="HorizontalAlign.Right">
                            <SfButton IconCss="e-icons e-plus" OnClick="@AddTopic">Add New Topic</SfButton>
                        </SfMessage>
                    </div>
                    <div class="p-2 row">
                        <SfGrid DataSource="@topics" AllowPaging ID="TopicDetails">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents CommandClicked="OnTopicsClicked" TValue="Topic"> </GridEvents>
                            <GridColumns>
                                <GridColumn Field="@nameof(Topic.TPriority)" HeaderText="Priority" Width="75" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
                                    <Template>
                                        @{
                                            var topic = (context as Topic);
                                            <div class="trust">
                                                <img style="width: 36px; height: 36px" alt=@topic!.TPriority src=@($"icons/{@topic.TPriority!.ToLower()}.png") />
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(Topic.IsTaskCreated)" HeaderText="Task" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60">
                                    <Template>
                                        @{
                                            var topic = (context as Topic);
                                            <div class="trust">
                                                @if (topic!.IsTaskCreated)
                                                {
                                                    <img style="width: 36px; height: 36px" alt=@topic!.TPriority src=@($"icons/task.png") />
                                                }
                                                else
                                                {
                                                    <img style="width: 36px; height: 36px" alt=@topic!.TPriority src=@($"icons/nottask.png") />
                                                }
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(Topic.TTitle)" HeaderText="Title"></GridColumn>
                                <GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50">
                                    <GridCommandColumns>
                                        <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-plus", CssClass="m-0"})" ID="AddTopicDetail"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                                <GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50">
                                    <GridCommandColumns>
                                        <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-description", CssClass="m-0"})" ID="MakeTask"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                                <GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50">
                                    <GridCommandColumns>
                                        <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-trash", CssClass="m-0"})" ID="DelTopic"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </CardContent>
            </SfCard>
        </div>
    </div>
    <div class="col">
        <div class="row mb-2">
            <SfCard>
                <CardHeader Title="Attachments" />
                <CardContent>
                    <SfGrid DataSource="@attachments" AllowSelection="false" AllowPaging="true">
                        <GridPageSettings PageSize="5"></GridPageSettings>
                        <GridEvents CommandClicked="OnCommandClicked" TValue="Attachment"> </GridEvents>
                        <GridColumns>
                            <GridColumn Field="@(nameof(Attachment.FileName))" HeaderText="File Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"></GridColumn>
                            <GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50">
                                <GridCommandColumns>
                                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-download" , CssClass="m-0"})" ID="Download"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                            <GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50">
                                <GridCommandColumns>
                                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-trash", CssClass="m-0" })" ID="Delete"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </CardContent>
                <CardFooter>
                    <CardFooterContent>
                        <SfUploader DirectoryUpload="false" MaxFileSize="@maxFileSize" AutoUpload="true" ShowFileList="true" ShowProgressBar>
                            <UploaderEvents ValueChange="@OnChange" OnRemove="@onRemove"></UploaderEvents>
                        </SfUploader>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
        <div class="row">
            <SfCard>
                <CardHeader Title="Attendees" />
                <CardContent>
                    <div class="row mb-2">
                    <div class="col-6">
                        @{
                            var listData = ListViewDataSource.Skip(SkipValue).Take(TakeValue).ToList();
                            <SfListView Id="List" 
                                        DataSource="@listData"
                                        HeaderTitle="Contacts"
                                        ShowHeader="false"
                                        CssClass="e-list-template"
                                        SortOrder="Syncfusion.Blazor.Lists.SortOrder.Ascending">
                                <ListViewFieldSettings TValue="ListDataModel" Id="Id" Text="Text"></ListViewFieldSettings>
                                <ListViewTemplates TValue="ListDataModel">
                                    <Template>
                                        <div class="e-list-wrapper e-list-multi-line e-list-avatar">
                                            @if (((context as ListDataModel).Avatar) != "")
                                            {
                                                <span class="e-avatar e-avatar-circle">@((context as ListDataModel).Avatar)</span>
                                            }
                                            else
                                            {
                                                <span class="@((context as ListDataModel).Pic) e-avatar e-avatar-circle"> </span>
                                            }
                                            <span class="e-list-item-header">@((context as ListDataModel).Text)</span>
                                            <span class="e-list-content">@((context as ListDataModel).Contact)</span>
                                        </div>
                                    </Template>
                                </ListViewTemplates>
                            </SfListView>
                        }
                        <SfPager @ref="@Page" ShowPagerMessage="false" PageSize=5 TotalItemsCount=ListViewDataSource.Count() ItemClick="Click" CssClass="mt-2">
                        </SfPager>
                    </div>
                    <div class="col-6">
                        <SfCard>
                            <CardHeader Title="Add New Attendee"></CardHeader>
                            <CardContent>
                                    <div class="p-2 row">
                                        <SfMessage ShowIcon="false" ContentAlignment="HorizontalAlign.Left">
                                            <SfButton IconCss="e-icons e-people">Make Request</SfButton>
                                        </SfMessage>
                                    </div>
                            </CardContent>
                        </SfCard>
                    </div>
                    </div>
                </CardContent>
            </SfCard>
        </div>
    </div>
</div>

<SfDialog Width="400px" MinHeight="350px" IsModal="true" @bind-Visible="@IsVisible" @ref="SfAddDialog">
    <DialogTemplates>
        <Header>
            <SfMessage ShowIcon="false" ContentAlignment="HorizontalAlign.Left">Add New Topic</SfMessage>
        </Header>
        <Content>
            <EditForm Model="@addTopic">
                <SfComboBox TValue="string" TItem="Priority" DataSource="@LocalData" Placeholder="Select Priority"
                            FloatLabelType="FloatLabelType.Auto" @bind-Value="addTopic.TPriority">
                    <ComboBoxFieldSettings Value="ID" Text="Value"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfTextBox @bind-Value="addTopic.TTitle" Placeholder='Title' FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <SfTextBox @bind-Value="addTopic.TDetails" Placeholder='Details' Multiline CssClass="mb-2" style="height:100px" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Add New Topic" OnClick="@SaveTopic" />
        <DialogButton Content="Close" OnClick="@CloseAddDialog" />
    </DialogButtons>
</SfDialog>


<SfDialog Width="550px" MinHeight="600" ShowCloseIcon="false" IsModal="true" CloseOnEscape="false" @bind-Visible="@AddDetailsVisible">
    <DialogEvents Opened="@DialogOpen"></DialogEvents>
    <DialogTemplates>
        <Header>
            <SfMessage ShowIcon="false" ContentAlignment="HorizontalAlign.Left">Update Topic Detail</SfMessage>
        </Header>
        <Content>
            <SfRichTextEditor @ref="RteObj" Height="500" @bind-Value="@TopicDetailValue">
                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
            </SfRichTextEditor>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Update Topic Detail" OnClick="@UpdateTopicDetail" />
        <DialogButton Content="Close" OnClick="@CloseDetailsDialog" />
    </DialogButtons>
</SfDialog>

<style>

    .e-upload .e-upload-files .e-upload-file-list {
        background-color: aliceblue;
    }

    .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: large;
        font-weight: bold;
        color: cornflowerblue;
    }

    .e-dialog .e-dlg-content {
        padding: 14px;
    }

    .pic01 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/1.png");
    }

    /*.e-listview.e-control {
            width: 400px;
        }

        .pic01 {
            background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/1.png");
        }

        .pic02 {
            background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/3.png");
        }

        .pic03 {
            background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/5.png");
        }

        .pic04 {
            background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/2.png");
        }

        #List .e-list-item:nth-child(1) .e-avatar {
            background-color: #039be5;
        }

        #List .e-list-item:nth-child(2) .e-avatar {
            background-color: #e91e63;
        }

        #List .e-list-item:nth-child(6) .e-avatar {
            background-color: #009688;
        }

        #List .e-list-item:nth-child(8) .e-avatar {
            background-color: #000088;
        }*/
</style>

@code
{
    [Parameter]
    public Guid? Id { get; set; }

    private AppointmentDataDto appointment { get; set; } = new();
    private Topic addTopic { get; set; } = new();
    private bool IsVisible { get; set; } = false;
    private bool AddDetailsVisible { get; set; } = false;
    private string? TopicDetailValue { get; set; }

    SfDialog SfAddDialog;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    protected override void OnInitialized()
    {
        if (Id is null)
        {
            navigationManager.NavigateTo("/");
        }
        if (Id is not null)
        {
            var result = DataSource.Where(x => x.Id.Equals(Id)).FirstOrDefault();
            if (result is not null)
            {
                appointment = result;
                GetAttachments();
            }
        }
    }

    private string[]? fileNames { get; set; }
    public class Attachment
    {
        public string? FileName { get; set; }
    }

    public class Priority
    {
        public string ID { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }

    List<Priority> LocalData = new List<Priority>
    {
        new Priority() { ID= "High", Value= "High" },
        new Priority() { ID= "Medium", Value= "Medium" },
        new Priority() { ID= "Low", Value= "Low" }
    };

    public class Topic
    {
        public Guid TId { get; set; }
        public string? TPriority { get; set; }
        public string? TTitle { get; set; }
        public string? TDetails { get; set; }
        public bool IsTaskCreated { get; set; } = false;
    }

    ObservableCollection<Topic> topics = new ObservableCollection<Topic>
    {
        new Topic { TId=new Guid("99bdc3c4-5b7f-4b24-be11-8b72c7b17842") ,TPriority="High", TTitle="Test Title-1" ,TDetails="test detail."},
        new Topic { TId=new Guid("f675db89-6bc6-442f-9bf9-8044c8092a91") ,TPriority="Medium", TTitle="Test Title-2",TDetails="test detail of Title-2", IsTaskCreated=true},
        new Topic { TId=new Guid("99bdc3c4-5b7f-4b24-be11-8b72c7b17842") ,TPriority="Low", TTitle="Test Title-3" ,TDetails="test detail."},
        new Topic { TId=new Guid("f675db89-6bc6-442f-9bf9-8044c8092a91") ,TPriority="Medium", TTitle="Test Title-4",TDetails="test detail of Title-2", IsTaskCreated=true},
        new Topic { TId=new Guid("99bdc3c4-5b7f-4b24-be11-8b72c7b17842") ,TPriority="Low", TTitle="Test Title-5" ,TDetails="test detail."},
        new Topic { TId=new Guid("f675db89-6bc6-442f-9bf9-8044c8092a91") ,TPriority="High", TTitle="Test Title-6",TDetails="test detail of Title-2"},

    };

    private ObservableCollection<Attachment> attachments = new();

    private void GetAttachments()
    {
        fileNames = null;
        attachments.Clear();
        if (Directory.Exists(Path.Combine("wwwroot\\files\\", Id.ToString()!)))
        {
            fileNames = Directory.GetFiles(Path.Combine("wwwroot\\files\\", Id.ToString()!));
            if (fileNames.Count() > 0)
            {
                foreach (var fileName in fileNames)
                {
                    attachments.Add(new Attachment { FileName = fileName.ToString().Replace($"wwwroot\\files\\{Id.ToString()}\\", null) });
                }
            }
        }
    }

    public Attachment? RowDetails { get; set; }

    public void AddTopic()
    {
        addTopic = new();
        this.IsVisible = true;
    }

    public async Task SaveTopic()
    {
        topics.Add(new Topic
            {
                TId = new Guid(),
                TPriority = addTopic.TPriority,
                TTitle = addTopic.TTitle,
                TDetails = addTopic.TDetails,
                IsTaskCreated = false
            });
        await SfAddDialog.HideAsync();

    }

    private void CloseAddDialog()
    {
        this.IsVisible = false;
    }

    SfRichTextEditor RteObj;

    private async Task DialogOpen()
    {
        if (RteObj is not null)
        {
            await RteObj.RefreshUIAsync();
        }
    }

    private Guid UpdatedTopicId { get; set; } = Guid.Empty;

    private void UpdateTopicDetail()
    {
        var topic = topics.FirstOrDefault(x => x.TId.Equals(UpdatedTopicId));
        if (topic is not null)
        {
            topic.TDetails = TopicDetailValue;
        }
        AddDetailsVisible = false;
    }

    private void CloseDetailsDialog()
    {
        AddDetailsVisible = false;
    }

    public async Task OnTopicsClicked(CommandClickEventArgs<Topic> args)
    {
        if (args.CommandColumn.ID == "AddTopicDetail")
        {
            AddDetailsVisible = true;
            UpdatedTopicId = args.RowData.TId;
            if (!string.IsNullOrEmpty(UpdatedTopicId.ToString()))
            {
                var topic = topics.FirstOrDefault(x => x.TId.Equals(UpdatedTopicId));
                if (topic is not null)
                {
                    TopicDetailValue = topic.TDetails;
                }
            }
        }
        if (args.CommandColumn.ID == "DelTopic")
        {
            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete this topic?", "Delete Topic");
            if (isConfirm)
            {
                topics.Remove(topics.First(x => x.TTitle!.Equals(args.RowData.TTitle)));
            }
        }
    }

    public async Task OnCommandClicked(CommandClickEventArgs<Attachment> args)
    {
        if (args.CommandColumn.ID == "Download")
        {

        }
        if (args.CommandColumn.ID == "Delete")
        {
            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete these item?", "Delete Attachment");
            if (isConfirm)
            {
                if (args.RowData.FileName is not null)
                {
                    Directory.CreateDirectory(Path.Combine("wwwroot\\files", Id.ToString()!));
                    string path = Path.Combine("wwwroot\\files\\", $"{Id.ToString()}/", args.RowData.FileName);
                    if (File.Exists(path))
                    {
                        File.Delete(path);
                        attachments.Remove(attachments.First(x => x.FileName!.Equals(args.RowData.FileName)));
                    }
                }
            }
        }
    }

    public List<AppointmentDataDto> DataSource = new List<AppointmentDataDto>
    {
        new AppointmentDataDto
        {
            Id = new Guid("9fec203d-8dc6-4a88-bf62-62f43b17b5ad"),
            Subject = "Meeting-1",
            StartTime = new DateTime(2020, 1, 31, 9, 30, 0) ,
            EndTime = new DateTime(2020, 1, 31, 11, 0, 0),
            ShortDescription = "It is first meeting in our company, we discuss our project plan and milestones with priority.",
            OwnerId = 1
        },
        new AppointmentDataDto
        {
            Id = new Guid("0815bc1d-dcb1-43ec-8907-b678b5ff1aa1"),
            Subject = "Meeting-2",
            StartTime = new DateTime(2020, 1, 30, 11, 30, 0) ,
            EndTime = new DateTime(2020, 1, 30, 14, 0, 0),
            OwnerId = 3
        },
    };

    private long maxFileSize = 3 * 1024 * 1024; // Max File size 3MB
    private int maxAllowedFiles = 3;
    private List<string> errors = new();

    private async Task OnChange(UploadChangeEventArgs args)
    {
        errors.Clear();
        if (args.Files.Count > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {args.Files.Count} files, but only {maxAllowedFiles} files are allowed");
            return;
        }

        foreach (var file in args.Files)
        {
            if (!string.IsNullOrEmpty(Id.ToString()))
            {
                try
                {
                    Directory.CreateDirectory(Path.Combine("wwwroot\\files", Id.ToString()!));
                    string path = Path.Combine("wwwroot\\files\\", $"{Id.ToString()}/", file.FileInfo.Name);
                    FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                    await file.File.OpenReadStream(maxFileSize).CopyToAsync(filestream);
                    filestream.Close();
                    attachments.Add(new Attachment { FileName = file.FileInfo.Name });
                }
                catch (Exception ex)
                {
                    errors.Add($"Error: {ex.Message}");
                }
            }
        }
    }

    private void onRemove(RemovingEventArgs args)
    {
        foreach (var removeFile in args.FilesData)
        {
            Directory.CreateDirectory(Path.Combine("wwwroot\\files", Id.ToString()!));
            string path = Path.Combine("wwwroot\\files\\", $"{Id.ToString()}/", removeFile.Name);
            if (File.Exists(path))
            {
                File.Delete(path);
                attachments.Remove(attachments.First(x => x.FileName!.Equals(removeFile.Name)));
            }
        }
    }

    public int SkipValue;
    public int TakeValue = 5;
    SfPager Page;
    public SfListView<ListDataModel> List { get; set; }

    public void Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
    }

    List<ListDataModel> ListViewDataSource = new List<ListDataModel>() {
        new ListDataModel {
            Text = "Jenifer",
            Contact = "(206) 555-985774",
            Id = "1",
            Avatar = "JE",
        },
        new ListDataModel {
            Text = "Amenda",
            Contact = "(206) 555-3412",
            Id = "2",
            Pic = "pic01",
            Avatar = "AM",
        },
        new ListDataModel {
            Text = "Isabella",
            Contact = "(206) 555-8122",
            Id = "4",
            Avatar = "IS",
        },
        new ListDataModel {
            Text = "William ",
            Contact = "(206) 555-9482",
            Id = "5",
            Avatar = "WI",
        },
        new ListDataModel {
            Text = "Jacob",
            Contact = "(71) 555-4848",
            Id = "6",
            Avatar = "JA",
        },
        new ListDataModel {
            Text = "Matthew",
            Contact = "(71) 555-7773",
            Id = "7",
            Avatar = "MA",
        },
        new ListDataModel {
            Text = "Oliver",
            Contact = "(71) 555-5598",
            Id = "8",
            Avatar = "OL",
        },

        new ListDataModel {
            Text = "Charlotte",
            Contact = "(206) 555-1189",
            Id = "9",
            Avatar = "CH",
        },
        new ListDataModel {
            Text = "Jacob",
            Contact = "(71) 555-4848",
            Id = "6",
            Avatar = "JA",
        },
        new ListDataModel {
            Text = "Matthew",
            Contact = "(71) 555-7773",
            Id = "7",
            Avatar = "MA",
        },
        new ListDataModel {
            Text = "Oliver",
            Contact = "(71) 555-5598",
            Id = "8",
            Avatar = "OL",
        },

        new ListDataModel {
            Text = "Charlotte",
            Contact = "(206) 555-1189",
            Id = "9",
            Avatar = "CH",
        }
        ,
        new ListDataModel {
            Text = "Jacob",
            Contact = "(71) 555-4848",
            Id = "6",
            Avatar = "JA",
        },
        new ListDataModel {
            Text = "Matthew",
            Contact = "(71) 555-7773",
            Id = "7",
            Avatar = "MA",
        },
        new ListDataModel {
            Text = "Oliver",
            Contact = "(71) 555-5598",
            Id = "8",
            Avatar = "OL",
        },

        new ListDataModel {
            Text = "Charlotte",
            Contact = "(206) 555-1189",
            Id = "9",
            Avatar = "CH",
        },
        new ListDataModel {
            Text = "Jacob",
            Contact = "(71) 555-4848",
            Id = "6",
            Avatar = "JA",
        },
        new ListDataModel {
            Text = "Matthew",
            Contact = "(71) 555-7773",
            Id = "7",
            Avatar = "MA",
        },
        new ListDataModel {
            Text = "Oliver",
            Contact = "(71) 555-5598",
            Id = "8",
            Avatar = "OL",
        },

        new ListDataModel {
            Text = "Charlotte",
            Contact = "(206) 555-1189",
            Id = "9",
            Avatar = "CH",
        },
        new ListDataModel {
            Text = "Oliver",
            Contact = "(71) 555-5598",
            Id = "8",
            Avatar = "OL",
        },

        new ListDataModel {
            Text = "Charlotte",
            Contact = "(206) 555-1189",
            Id = "9",
            Avatar = "CH",
        }
    };
    // Specifies the model class for ListView datasource.
    public class ListDataModel
    {
        public string Id
        {
            get;
            set;
        }
        public string Text
        {
            get;
            set;
        }
        public string Avatar
        {
            get;
            set;
        }
        public string Pic
        {
            get;
            set;
        }
        public string Contact
        {
            get;
            set;
        }
    }
}
